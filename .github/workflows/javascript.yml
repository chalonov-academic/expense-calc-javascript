# Workflow de CI/CD para aplicación JavaScript de calculadora de gastos
name: JavaScript CI

# Define cuándo se ejecuta este workflow
on:
  push:
    branches: [ main ]      # Se ejecuta cuando hay push a la rama main
  pull_request:
    branches: [ main ]      # Se ejecuta cuando hay pull request hacia main

# Define los trabajos (jobs) que se ejecutarán
jobs:
  test:
    # Especifica el sistema operativo donde se ejecutará
    runs-on: ubuntu-latest

    # Lista de pasos que se ejecutarán secuencialmente
    steps:
    # PASO 1: Descargar el código del repositorio
    - name: Checkout code
      uses: actions/checkout@v3    # Action oficial de GitHub para descargar código

    # PASO 2: Configurar Node.js para ejecutar JavaScript
    - name: Set up Node.js
      uses: actions/setup-node@v3  # Action oficial para instalar Node.js
      with:
        node-version: '18'         # Versión específica de Node.js

    # PASO 3: Instalar dependencias para testing
    - name: Install testing dependencies
      run: |
        # Inicializar package.json automáticamente (responde "yes" a todo)
        npm init -y
        # Instalar Jest (framework de testing) y jsdom (simula navegador)
        npm install --save-dev jest jest-environment-jsdom

    # PASO 4: Ejecutar los tests automatizados
    - name: Run basic tests
      run: |
        # Ejecuta el comando 'npm test' que está definido en package.json
        # Este comando ejecuta Jest y corre todos los archivos *.test.js
        npm test

    # PASO 5: Validar la estructura HTML y presencia de JavaScript
    - name: Validate HTML and basic structure
      run: |
        # Verificar que el archivo HTML principal existe
        if [ ! -f "src/index.html" ]; then
          echo "Error: src/index.html no encontrado"
          exit 1                   # Salir con error si no existe
        fi
        
        # Verificar que el archivo no está vacío
        if [ ! -s "src/index.html" ]; then
          echo "Error: src/index.html está vacío"
          exit 1                   # Salir con error si está vacío
        fi
        
        # Verificar que contiene etiquetas HTML básicas
        if ! grep -q "<html" src/index.html; then
          echo "Error: No se encontró tag HTML"
          exit 1                   # Salir con error si no es HTML válido
        fi
        
        # Verificar que contiene JavaScript embebido
        if ! grep -q "<script>" src/index.html; then
          echo "Error: No se encontró JavaScript"
          exit 1                   # Salir con error si no tiene JavaScript
        fi
        
        echo "HTML validation passed"

    # PASO 6: Probar que el servidor HTTP de Python funciona
    - name: Test Python HTTP server
      run: |
        # Navegar al directorio donde está la aplicación
        cd src
        # Iniciar servidor HTTP en segundo plano por máximo 5 segundos
        timeout 5 python3 -m http.server 8000 &
        # Esperar 2 segundos para que el servidor arranque
        sleep 2
        # Probar que el servidor responde correctamente
        curl -f http://localhost:8000/ > /dev/null
        echo "Python HTTP server test passed"